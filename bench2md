#!/usr/bin/env python3

from sys import stdin
from re import compile as regex
from functools import reduce

def tables(inp):
	# parser and records generator
	def records():
		marker_line = regex(r'^\s*(\d+) keys of (\d+) bytes \(load factor')
		data_line = regex(r'^\s*(set|get|del): (?:\d+\.\d*)s \((\d+) ns/op, (\d+) op/s\)')

		try:
			s = next(inp)
			while True:
				m = marker_line.match(s)
				while not m:
					m = marker_line.match(next(inp))

				num_keys, key_len, ops = int(m[1]), int(m[2]), {}

				for s in inp:
					m = data_line.match(s)

					if not m:
						break

					ops[m[1]] = (int(m[2]), int(m[3]))	# op -> (ns, ops)

				assert(len(ops) == 3)
				yield num_keys, key_len, ops

		except StopIteration:
			pass

	# aggregator function
	def add_to_table(t, v):
		num_keys, key_len, ops = v
		t.setdefault(num_keys, {})[key_len] = (ops['set'][1], ops['get'][1], ops['del'][1])
		return t

	# build tables
	return reduce(add_to_table, records(), {})

def print_table_header(num_keys):
	print(f'\n#### _{num_keys} keys:_')
	print('key length, in bytes | `smap_set` (Mops/s) | `smap_get` (Mops/s) | `smap_del` (Mops/s)')
	print('-------------------- | ------------------- | ------------------- | -------------------')

print('''### Benchmarks
Tested on Linux Mint 20.1, with Intel© Core™ i5-8500T CPU @ 2.10GHz.

In the tables below `Mops/s` stands for millions of operations per second.''')

ts = tables(stdin)

for num_keys in sorted(ts.keys()):
	print_table_header(num_keys)
	t = ts[num_keys]
	for key_len in sorted(t.keys()):
		print(key_len, *(f'| {i / 1000000}' for i in t[key_len]))
